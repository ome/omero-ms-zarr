---
name: Gradle

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 * * 0'

jobs:
  build:
    strategy:
      matrix:
        java: [1.8, 11]
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      gradle_version: 5.2.1  # set to empty to build with most recent version
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Wrap with specified version
        run: gradle wrapper --gradle-version=${{ env.gradle_version }}
        if: ${{ env.gradle_version != '' }}
      - name: Wrap without version
        run: gradle wrapper
        if: ${{ env.gradle_version == '' }}
      - name: Prepare minio
        run: |
          (cd ci && ./startminio.sh)
          echo AWS_ACCESS_KEY_ID=stsadmin >> $GITHUB_ENV
          echo AWS_SECRET_ACCESS_KEY=stsadmin-secret >> $GITHUB_ENV
      - name: Build
        run: |
          gradle check
          gradle shadowJar
  dispatch:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Dispatch event to ome_zarr_test_suite.
        uses: peter-evans/repository-dispatch@v1
        if: ${{github.event.action != 'run_test_suite' }}
        with:
          token: ${{ secrets.API_TOKEN_GITHUB }}
          event-type: run_test_suite
          repository: ome/ome_zarr_test_suite
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.event.pull_request.head.sha }}", "repo": "${{ github.repository }}", "owner": "${{github.repository_owner}}", "number": "${{github.event.number}}"}'
